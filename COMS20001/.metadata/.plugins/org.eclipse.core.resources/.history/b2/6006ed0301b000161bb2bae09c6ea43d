// COMS20001 - Cellular Automaton Farm - Initial Code Skeleton
// (using the XMOS i2c accelerometer demo code)

#include <platform.h>
#include <xs1.h>
#include <stdio.h>
#include "pgmIO.h"
#include "i2c.h"

on tile[0]: in port buttons = XS1_PORT_4E;
on tile[0]: out port leds = XS1_PORT_4F;

#define  IMHT 16                  //image height
#define  IMWD 16                  //image width

#define coreNo 4     //The number channels created for communication

#define sentNumber ((IMHT/coreNo) + 2)

typedef unsigned char uchar;      //using uchar as shorthand

on tile[0]: port p_scl = XS1_PORT_1E;         //interface ports to orientation
on tile[0]: port p_sda = XS1_PORT_1F;

#define FXOS8700EQ_I2C_ADDR 0x1E  //register addresses for orientation
#define FXOS8700EQ_XYZ_DATA_CFG_REG 0x0E
#define FXOS8700EQ_CTRL_REG_1 0x2A
#define FXOS8700EQ_DR_STATUS 0x0
#define FXOS8700EQ_OUT_X_MSB 0x1
#define FXOS8700EQ_OUT_X_LSB 0x2
#define FXOS8700EQ_OUT_Y_MSB 0x3
#define FXOS8700EQ_OUT_Y_LSB 0x4
#define FXOS8700EQ_OUT_Z_MSB 0x5
#define FXOS8700EQ_OUT_Z_LSB 0x6

char infname[] = "test.pgm";     //put your input image path here
char outfname[] = "testout.pgm"; //put your output image path here

/////////////////////////////////////////////////////////////////////////////////////////
//
// Read Image from PGM file from path infname[] to channel c_out
//
/////////////////////////////////////////////////////////////////////////////////////////
void DataInStream(char infname[], chanend c_out)
{
  int res;
  uchar line[ IMWD ];
  printf( "DataInStream: Start...\n" );

  //Open PGM file
  res = _openinpgm( infname, IMWD, IMHT );
  if( res ) {
    printf( "DataInStream: Error openening %s\n.", infname );
    return;
  }


  //Read image line-by-line and send byte by byte to channel c_out
  for( int y = 0; y < IMHT; y++ ) {
    _readinline( line, IMWD );
    for( int x = 0; x < IMWD; x++ ) {
      c_out <: line[ x ];
      //printf( "-%4.1d ", line[ x ] ); //show image values
    }
    //printf( "\n" );
  }

  //Close PGM image file
  _closeinpgm();
  printf( "DataInStream: Done...\n" );
  return;
}


//READ BUTTONS and send button pattern to Distributor
void buttonListener(in port b, chanend toDistributor) {
  int r;
  while (1) {
    b when pinseq(15)  :> r;    // check that no button is pressed
    b when pinsneq(15) :> r;    // check if some buttons are pressed
    if ((r==13) || (r==14))     // if either button is pressed
    toDistributor <: r;             // send button pattern to the Distributor
  }
}


//Read pattern fromDistributor and send it to the LEDs
int showLEDs(out port p, chanend fromDistributor) {
  int pattern; //1st bit...separate green LED
               //2nd bit...blue LED
               //3rd bit...green LED
               //4th bit...red LED
  while (1) {
    fromDistributor :> pattern;   //receive new pattern from visualiser
    p <: pattern;                //send pattern to LED port
  }
  return 0;
}


//Pauses the game, displays number of processing rounds occured, current
//number of live cells and time elapsed since image has been read in.
void pauseGame(chanend fromAcc, int world[IMWD][IMHT], chanend toLEDs, int processingRounds, uint32_t elapsedTime){

    toLEDs <: 8;

    printf("Processing Rounds Completed: %d\n", processingRounds);

    int counter;
    uchar alive = (uchar)(255);
    for(int y = 0; y < IMHT; y++){
        for(int x = 0; x < IMWD; x++){
            if(world[x][y] == alive)
                counter++;
        }
    }

    printf("Current Number Of Live Cells: %d\n", counter);

    printf("Total Processing Time: %u\n", elapsedTime);

    int accValue;
    while(accValue == 1){
        fromAcc :> accValue;
    }

    toLEDs <: 4;
}


//Returns the number of live cells around a given cell
//param lifeBoard = The current board array.
//param x = The x cord of the given cell in the lifeBoard.
//param y = The y cord of the given cell in the lifeBoard.
int adjacentAliveCounter(int lifeBoard[IMWD][sentNumber], int x, int y){
    int counter = 0;
    uchar alive = (uchar)(255);

    if(x < 1){
        x = x + IMWD;
    }
    if(y < 1){
        y = y + sentNumber;
    }

    if(lifeBoard[(x+1)%IMWD][(y+1)%sentNumber] == alive){
        counter++;
    }
    if(lifeBoard[(x+1)%IMWD][y%sentNumber] == alive){
            counter++;
    }
    if(lifeBoard[(x+1)%IMWD][(y-1)%sentNumber] == alive){
            counter++;
    }
    if(lifeBoard[x%IMWD][(y+1)%sentNumber] == alive){
            counter++;
    }
    if(lifeBoard[x%IMWD][(y-1)%sentNumber] == alive){
            counter++;
    }
    if(lifeBoard[(x-1)%IMWD][(y+1)%sentNumber] == alive){
            counter++;
    }
    if(lifeBoard[(x-1)%IMWD][y%sentNumber] == alive){
            counter++;
    }
    if(lifeBoard[(x-1)%IMWD][(y-1)%sentNumber] == alive){
            counter++;
    }
    return counter;
}


//Determines if a parsed in cell should be alive in the next generation.
//param lifeBoard = The current board array.
//param cellWidth = The x cord of the given cell in the lifeBoard.
//param cellHeight = The y cord of the given cell in the lifeBoard.
int aliveNextGen(int lifeBoard[IMWD][sentNumber], int cellHeight, int cellWidth){

    int currentCell = lifeBoard[cellWidth][cellHeight];

    int counter = adjacentAliveCounter(lifeBoard, cellWidth, cellHeight);

    if(counter < 2){
        return 0;
    }
    if(counter == 2 && currentCell == 0){
        return 0;
    }
    if(counter == 2 && currentCell != 0){
        return 255;
    }
    if(counter == 3){
        return 255;
    }
    if(counter > 3){
        return 0;
    }
}

//******Needs to be updated with new optional choice of coreNo i.e each if still think 3 lines are sent which is not entirely true ******/////
//Finds the correct sendArray to be sent to a worker
void findSentArray(int world[IMWD][IMHT], int sentArray[IMWD][sentNumber], int line){

        //Deals with top line of the world
        if(line == 0){
            int y = 1;
            int k1 = 0;
            while(y < sentNumber){
                  for(int j = 0; j < IMWD; j++){
                      sentArray[j][y] = world[j][line+k1];
                  }
                  y++;
                  k1++;
            }
            for(int j = 0; j < IMWD; j++){
                sentArray[j][0] = world[j][15];
            }
        }

        //Deals with bottom line of the world
        else if(line == 15){
            int y = 0;
            int k2 = -1;
            while(y < sentNumber-1){
                  for(int j = 0; j < IMWD; j++){
                      sentArray[j][y] = world[j][line+k2];
                  }
                  y++;
                  k2++;
            }
            for(int j = 0; j < IMWD; j++){
                sentArray[j][line+1] = world[j][0];
            }
        }

        //Deals with rest of the cases
        else{
           //Creates the correct sendArray for rest of cases
            int y = 0;
            int k3 = -1;
            while(y < sentNumber){
                for(int j = 0; j < IMWD; j++){
                    if(k3 +line > 15){
                        k3 = 0;
                        line = 0;
                    }
                    sentArray[j][y] = world[j][line+k3];
                }
                y++;
                k3++;
            }
        }
}


//Sends the values of an array down a specific channel
void sentArraySend(int sentArray[IMWD][sentNumber], chanend c){
    for(int y = 0; y < sentNumber; y++){
        for(int x=0; x < IMWD; x++){
            c <: sentArray[x][y];
        }
    }
}


//Recieves the values of an array from a specific channel and builds the passed in array with them
void sentArrayReceive(int sentArray[IMWD][sentNumber], chanend c){
    for(int y = 0; y < sentNumber; y++){
            for(int x=0; x < IMWD; x++){
                c :> sentArray[x][y];

            }
        }
}


//Finds the next generation for the given lines of the work send in to the workerIn Channel
void findNextGenLine(chanend worker){
    int sentArray[IMWD][sentNumber];
    sentArrayReceive(sentArray, worker);
    int nextGenLine[IMWD][sentNumber];
    for(int i=1; i < sentNumber-1; i++){
        for(int x=0; x < IMWD; x++){
        nextGenLine[x][i] = aliveNextGen(sentArray, i, x);
        }
    }
    sentArraySend(nextGenLine, worker);
}


//Merges all of the results from the workers in to a single next generation world array.
void createNextGenArray(chanend workers[coreNo], int nextGenArray[IMWD][IMHT]){

    int nextGenLines[IMWD][sentNumber];
    int i = 0;
    for(int x=0; x < coreNo; x++){
        sentArrayReceive(nextGenLines, workers[x]);
        for(int y=1; y < sentNumber-1; y++){
            for(int j=0; j < IMWD; j++){
               nextGenArray[j][i] = nextGenLines[j][y];
            }
            i++;
        }
    }
}


//Creates the next generation array from the current worlds state.
void sendToWorkers(int world[IMWD][IMHT], int nextGenWorld[IMWD][IMHT], chanend workers[coreNo]){

    int x = 0;
    int y = 0;
    while(y < IMHT){
        int sentArray[IMWD][sentNumber];
        findSentArray(world, sentArray,y);
        sentArraySend(sentArray, workers[x]);
        y = y + (sentNumber-2);
        x++;
    }

    createNextGenArray(workers, nextGenWorld);
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Start your implementation by changing this function to implement the game of life
// by farming out parts of the image to worker threads who implement it...
// Currently the function just inverts the image
//
/////////////////////////////////////////////////////////////////////////////////////////
void distributor(chanend c_in, chanend c_out, chanend fromAcc, chanend workers[coreNo], chanend buttonsChan, chanend toLEDs){

    //default case for a select statement

  uchar val;

  //Initialisation below

  int start = 0;
  printf( "ProcessImage: Start, size = %dx%d\n", IMHT, IMWD );
  printf( "Waiting for SW1 press...\n" );
  while(start != 14){
    buttonsChan :> start;
  }



  int world[IMWD][IMHT];

  printf( "Reading...\n" );
  int readingPattern = 1;
  toLEDs <: readingPattern;
  for( int y = 0; y < IMHT; y++ ) {
    for( int x = 0; x < IMWD; x++ ) {
      c_in :> val;
      world[x][y] = val;
    }
  }


  int alive;
  uchar aliveC;
  int nextGenWorld[IMWD][IMHT];
  int beginOutStream = 0;
  int processingPattern = 4;

  //Image processing code below

  timer t;
  uint32_t startTime, currentTime;
  t :> startTime;


  for(int i = 0; i < 100; i++){
      toLEDs <: processingPattern;
      sendToWorkers(world, nextGenWorld, workers);

      for( int y = 0; y < IMHT; y++ ) {
          for( int x = 0; x < IMWD; x++ ) {
              int buttonsVal;
              int accVal;

              select{
                  case buttonsChan :> buttonsVal:
                      if(buttonsVal == 13)
                          beginOutStream = 1;
                      break;

                  //case fromAcc :> accVal:
                    //   t :> currentTime;
                    //   pauseGame(fromAcc, world, toLEDs, i+1, currentTime - startTime);
                    //   break;

                  default:
                      break;
              }
              alive = nextGenWorld[x][y];
              world[x][y] = nextGenWorld[x][y];
          }
      }
      if(beginOutStream == 1){
          break;
      }

      if(processingPattern == 4)
          processingPattern = 0;
      else
          processingPattern = 4;
  }

  //Exporting code below

  int exportPattern = 2;

  for( int y = 0; y < IMHT; y++ ) {
      for( int x = 0; x < IMWD; x++ ) {
          toLEDs <: exportPattern;
          alive = nextGenWorld[x][y];
          aliveC = (uchar)(alive);
          c_out <: aliveC;
      }
  }
  toLEDs <: 0;



}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Write pixel stream from channel c_in to PGM image file
//
/////////////////////////////////////////////////////////////////////////////////////////
void DataOutStream(char outfname[], chanend c_in)
{
  int res;
  uchar line[ IMWD ];

  //Open PGM file
  printf( "DataOutStream: Start...\n" );
  res = _openoutpgm( outfname, IMWD, IMHT );
  if( res ) {
    printf( "DataOutStream: Error opening %s\n.", outfname );
    return;
  }

  //Compile each line of the image and write the image line-by-line
  for( int y = 0; y < IMHT; y++ ) {
    for( int x = 0; x < IMWD; x++ ) {
      c_in :> line[ x ];
    }
    _writeoutline( line, IMWD );
    //printf( "DataOutStream: Line written...\n" );
  }

  //Close the PGM image
  _closeoutpgm();
  printf( "DataOutStream: Done...\n" );
  return;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Initialise and  read orientation, send first tilt event to channel
//
/////////////////////////////////////////////////////////////////////////////////////////
void orientation( client interface i2c_master_if i2c, chanend toDist) {
  i2c_regop_res_t result;
  char status_data = 0;
  int tilted = 0;

  // Configure FXOS8700EQ
  result = i2c.write_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_XYZ_DATA_CFG_REG, 0x01);
  if (result != I2C_REGOP_SUCCESS) {
    printf("I2C write reg failed\n");
  }
  
  // Enable FXOS8700EQ
  result = i2c.write_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_CTRL_REG_1, 0x01);
  if (result != I2C_REGOP_SUCCESS) {
    printf("I2C write reg failed\n");
  }

  //Probe the orientation x-axis forever
  while (1) {

    //check until new orientation data is available
    do {
      status_data = i2c.read_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_DR_STATUS, result);
    } while (!status_data & 0x08);

    //get new x-axis tilt value
    int x = read_acceleration(i2c, FXOS8700EQ_OUT_X_MSB);

    //send signal to distributor after first tilt
    if (!tilted) {
      if (x>30) {
        tilted = 1 - tilted;
        toDist <: 1;
      }
    }
  }
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Orchestrate concurrent system and start up all threads
//
/////////////////////////////////////////////////////////////////////////////////////////

int main(void) {

i2c_master_if i2c[1];               //interface to orientation
chan c_inIO, c_outIO, c_control;    //extend your channel definitions here
chan workers[coreNo];
chan toDistributorButton;
chan fromDistributorLEDs;

par {
    on tile[0]: par (int x = 0; x < coreNo; x++){
                    for(int i = 0; i < 100; i++){
                        findNextGenLine(workers[x]);
                    }
                }

    //on tile[0]: par (int x = 3; x < coreNo; x++){
    //                for(int i = 0; i < 100; i++){
    //                    findNextGenLine(workers[x]);
    //                }
    //            }
     on tile[0]: i2c_master(i2c, 1, p_scl, p_sda, 10);   //server thread providing orientation data
     on tile[0]: orientation(i2c[0],c_control);        //client thread reading orientation data
     on tile[1]: DataInStream(infname, c_inIO);          //thread to read in a PGM image
     on tile[1]: DataOutStream(outfname, c_outIO);       //thread to write out a PGM image
     on tile[1]: distributor(c_inIO, c_outIO, c_control, workers, toDistributorButton, fromDistributorLEDs);//thread to coordinate work on imag
     on tile[0]: buttonListener(buttons, toDistributorButton);
     on tile[0]: showLEDs(leds,fromDistributorLEDs);
  }


  return 0;
}
